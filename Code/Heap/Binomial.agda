module Heap.Binomial where

open import Data.Nat as ‚Ñï hiding (_*_ ; _^_)
open import Data.Nat.Properties
open import Data.Integer as ‚Ñ§ using (‚Ñ§ ; _‚äñ_ ; +_ ; -_)
import Data.Integer.Properties as ‚Ñ§-Props
open import Data.Bool as ùîπ using (Bool ; true ; false)
open import Data.Maybe hiding (_>>=_)
open import Data.Sum using (inj‚ÇÅ ; inj‚ÇÇ)
open import Data.Vec as Vec using (Vec ; _‚à∑_)
open import Level using (Level)
open import Function
open import Relation.Nullary using (Dec ; yes ; no)
open import Relation.Binary.PropositionalEquality
open import Relation.Binary.HeterogeneousEquality as H using (_‚âÖ_ ; ‚â°-subst-removable ; ‚âÖ-to-‚â°)

open import DecTree
open import Nat.Props
open import Nat.Mul
open import Nat.Log
open import Int.Props
open import Util
open import AmortizedTime
open import Leq

private
    variable
        a : Level
        A : Set a

data DescList (A : ‚Ñï -> Set a) : ‚Ñï -> Set a where
    D[_] : A 0 -> DescList A 0
    _D‚à∑_ : {l : ‚Ñï} -> A (suc l) -> DescList A l -> DescList A (suc l)


data BinomialTree (A : Set a) : ‚Ñï -> Set a where
    Leaf : A -> BinomialTree A 0
    Node : {l : ‚Ñï} -> A -> DescList (BinomialTree A) l -> BinomialTree A (suc l)

tSize : {l : ‚Ñï} -> BinomialTree A l -> ‚Ñï
tSize {l = l} _ = 2 ^ l

tVal : {l : ‚Ñï} -> BinomialTree A l -> A
tVal (Leaf x) = x
tVal (Node x _) = x

link : {l : ‚Ñï} -> BinomialTree A l -> BinomialTree A l -> DecTree A (BinomialTree A (suc l)) 1
link (Leaf l) (Leaf r) = if l ‚â§? r then return (Node l $ D[ Leaf r ]) else return (Node r $ D[ Leaf l ])
link l@(Node x xs) r@(Node y ys) = if x ‚â§? y then return (Node x $ r D‚à∑ xs) else return (Node y $ l D‚à∑ ys)


data SparseTreeList (A : Set a) : ‚Ñï -> ‚Ñï -> Set a where
    [] : {l : ‚Ñï} -> SparseTreeList A l 0
    empty‚à∑ : {l acc : ‚Ñï} -> SparseTreeList A (suc l) acc -> SparseTreeList A l acc
    entry_‚à∑_ :  {l acc acc' : ‚Ñï}
             -> {acc'‚â°2^l+acc : acc' ‚â° 2 ^ l + acc}
             -> BinomialTree A l
             -> SparseTreeList A (suc l) acc
             -> SparseTreeList A l acc'


data BinomialHeap (A : Set a) : ‚Ñï -> Set a where
    heap : {l acc : ‚Ñï} -> SparseTreeList A l acc -> BinomialHeap A acc

-- # entries
entries : {l acc : ‚Ñï} -> SparseTreeList A l acc -> ‚Ñï
entries [] = 0
entries (empty‚à∑ ts) = entries ts
entries (entry _ ‚à∑ ts) = 1 + entries ts

ts-acc : {l acc : ‚Ñï} -> SparseTreeList A l acc -> ‚Ñï
ts-acc {acc = acc} _ = acc


tlist-subst : {l l' acc : ‚Ñï} -> l ‚â° l' -> SparseTreeList A l acc -> SparseTreeList A l' acc
tlist-subst {A = A} {acc = acc} l‚â°l' ts = subst (Œª x ‚Üí SparseTreeList A x acc) l‚â°l' ts

tlist-subst-elim :  {b : Level}
                    {B : Set b}
                    {l l' acc : ‚Ñï}
                 -> (f : {A : Set a} {l acc : ‚Ñï} -> SparseTreeList A l acc -> B)
                 -> (l‚â°l' : l ‚â° l')
                 -> (ts : SparseTreeList A l acc)
                 -> f ts ‚â° f (subst (Œª x ‚Üí SparseTreeList A x acc) l‚â°l' ts)
tlist-subst-elim f refl ts = refl

tlist-subst-acc : {l acc acc' : ‚Ñï} -> acc ‚â° acc' -> SparseTreeList A l acc -> SparseTreeList A l acc'
tlist-subst-acc {A = A} {l = l} acc‚â°acc' ts = subst (SparseTreeList A l) acc‚â°acc' ts

tlist-dec-subst : {l l' acc t : ‚Ñï} -> l ‚â° l' -> DecTree A (SparseTreeList A l acc) t -> DecTree A (SparseTreeList A l' acc) t
tlist-dec-subst {A = A} {acc = acc} {t} l‚â°l' dec = subst (Œª x ‚Üí DecTree A (SparseTreeList A x acc) t) l‚â°l' dec

tlist-dec-subst-acc : {l acc acc' t : ‚Ñï} -> acc ‚â° acc' -> DecTree A (SparseTreeList A l acc) t -> DecTree A (SparseTreeList A l acc') t
tlist-dec-subst-acc {A = A} {l = l} {t = t} acc‚â°acc' dec =  subst (Œª x ‚Üí DecTree A (SparseTreeList A l x) t) acc‚â°acc' dec

tlist-dec-subst-acc-elim :  {b : Level}
                            {B : Set b}
                            {l acc acc' t : ‚Ñï}
                         -> (f : {l acc t : ‚Ñï} -> DecTree A (SparseTreeList A l acc) t -> B)
                         -> (acc‚â°acc' : acc ‚â° acc')
                         -> (comp : DecTree A (SparseTreeList A l acc) t)
                         -> f comp ‚â° f (tlist-dec-subst-acc acc‚â°acc' comp)
tlist-dec-subst-acc-elim f refl comp = refl


leadingEntries : {l n : ‚Ñï} -> SparseTreeList A l n -> ‚Ñï
leadingEntries [] = 0
leadingEntries (empty‚à∑ _) = 0
leadingEntries (entry _ ‚à∑ xs) = 1 + leadingEntries xs

leading‚â§len : {l n : ‚Ñï} -> (ts : SparseTreeList A l n) -> leadingEntries ts ‚â§ entries ts
leading‚â§len [] = z‚â§n
leading‚â§len (empty‚à∑ ts) = z‚â§n
leading‚â§len (entry x ‚à∑ ts) = s‚â§s $ leading‚â§len ts


len-log-forward : {k n l acc : ‚Ñï} -> k ‚â§ 1+‚åälog‚ÇÇ n ‚åã -> n < 2 ^ l -> (ts : SparseTreeList A l acc) -> (k + entries ts) ‚â§ 1+‚åälog‚ÇÇ n + acc ‚åã
len-log-forward {k = k} {n} k‚â§1+logn n‚â§2^l [] =
        subst2 (_‚â§_)
            (sym $ +-identity ≥ k)
            (cong 1+‚åälog‚ÇÇ_‚åã $ sym $ +-identity ≥ n)
        k‚â§1+logn
len-log-forward {l = l} k‚â§1+logn n‚â§2^l (empty‚à∑ ts) = len-log-forward k‚â§1+logn (‚â§-trans n‚â§2^l (m‚â§m+n (2 ^ l) (2 ^ l))) ts
len-log-forward {k = k} {n} {l} {acc} k‚â§1+logn n‚â§2^l (entry_‚à∑_ {acc = acc'} {acc'‚â°2^l+acc = pf} x ts) = begin
        k + suc (entries ts)           ‚â°‚ü® +-suc k (entries ts) ‚ü©
        suc k + entries ts             ‚â§‚ü® len-log-forward (1+k‚â§1+log[n+2^l] k n l k‚â§1+logn n‚â§2^l) (+-monoÀ°-‚â§ (2 ^ l) n‚â§2^l) ts ‚ü©
        1+‚åälog‚ÇÇ (n + 2 ^ l) + acc' ‚åã   ‚â°‚ü® cong (1+‚åälog‚ÇÇ_‚åã) $ +-assoc n (2 ^ l) acc' ‚ü©
        1+‚åälog‚ÇÇ n + (2 ^ l + acc') ‚åã   ‚â°‚ü® cong (Œª x ‚Üí 1+‚åälog‚ÇÇ n + x ‚åã) $ sym pf ‚ü©
        1+‚åälog‚ÇÇ n + acc ‚åã              ‚àé
    where
        open ‚â§-Reasoning
        1+k‚â§1+log[n+2^l] : (k n l : ‚Ñï) -> k ‚â§ 1+‚åälog‚ÇÇ n ‚åã -> n < 2 ^ l -> suc k ‚â§ 1+‚åälog‚ÇÇ n + 2 ^ l ‚åã
        1+k‚â§1+log[n+2^l] .0 0 l z‚â§n n2^l = ‚â§-trans (s‚â§s z‚â§n) (1+‚åälog‚ÇÇ‚åã-mono $ a^n‚â•1 1 l)
        1+k‚â§1+log[n+2^l] k n@(suc n-1) l k‚â§1+logn n<2^l = begin
            suc k                        ‚â§‚ü® +-mono ≥-‚â§ 1 k‚â§1+logn ‚ü©
            suc 1+‚åälog‚ÇÇ n ‚åã              ‚â°‚ü® cong (suc ‚àò 1+‚åälog‚ÇÇ_‚åã) $ sym $ ‚åä2n/2‚åã‚â°n n ‚ü©
            suc 1+‚åälog‚ÇÇ ‚åä 2 ‚Ñï.* n /2‚åã ‚åã  ‚â°‚ü® cong (suc ‚àò 1+‚åälog‚ÇÇ_‚åã ‚àò ‚åä_/2‚åã) $ *‚â°* 2 n ‚ü©
            suc 1+‚åälog‚ÇÇ ‚åä 2 * n /2‚åã ‚åã    ‚â°‚ü® sym $ 1+‚åälog‚ÇÇ‚åã-suc (n-1 + n) ‚ü©
            1+‚åälog‚ÇÇ 2 * n ‚åã              ‚â§‚ü® 1+‚åälog‚ÇÇ‚åã-mono $ +-mono ≥-‚â§ n (<‚áí‚â§ n<2^l) ‚ü©
            1+‚åälog‚ÇÇ n + 2 ^ l ‚åã          ‚àé

len‚â§‚åälog‚ÇÇacc‚åã : {l acc : ‚Ñï} -> (ts : SparseTreeList A l acc) -> entries ts ‚â§ 1+‚åälog‚ÇÇ acc ‚åã
len‚â§‚åälog‚ÇÇacc‚åã {l = l} ts = len-log-forward z‚â§n (a^n‚â•1 1 l) ts

heapLeading : {l : ‚Ñï} -> BinomialHeap A l -> ‚Ñï
heapLeading (heap xs) = leadingEntries xs


tlist-amortized0 : (A : Set a) -> Amortized (SparseTreeList A 0)
Amortized.i‚ÇÄ        (tlist-amortized0 A) = 0
Amortized.initial   (tlist-amortized0 A) = []
Amortized.potential (tlist-amortized0 A) = entries
Amortized.init‚â°0    (tlist-amortized0 A) = refl

tlist-amortized' : (A : Set a) -> Amortized1 (SparseTreeList A)
Amortized1.i‚ÇÄ        (tlist-amortized' A)   = 0
Amortized1.initial   (tlist-amortized' A) l = []
Amortized1.potential (tlist-amortized' A)   = entries
Amortized1.init‚â°0    (tlist-amortized' A) l = ‚â§-antisym (len‚â§‚åälog‚ÇÇacc‚åã (Amortized1.initial (tlist-amortized' A) l)) z‚â§n


extendTList : {l l' acc : ‚Ñï} -> l ‚â§ l' -> SparseTreeList A l' acc -> SparseTreeList A l acc
extendTList {l = l} {l'} l‚â§l' ts with l <? l'
... | yes (s‚â§s l‚â§l'-1) = extendTList l‚â§l'-1 (empty‚à∑ ts)
... | no l‚âÆl' = tlist-subst (‚â§-antisym (‚âÆ‚áí‚â• l‚âÆl') l‚â§l') ts

extendTList-inv : ‚àÄ {l l' acc} -> (l‚â§l' : l ‚â§ l') -> (ts : SparseTreeList A l' acc) -> entries (extendTList l‚â§l' ts) ‚â° entries ts
extendTList-inv {l = l} {l'} l‚â§l' ts with l <? l'
... | yes (s‚â§s l‚â§l'-1) = extendTList-inv l‚â§l'-1 (empty‚à∑ ts)
... | no l‚âÆl'  = sym $ tlist-subst-elim entries (‚â§-antisym (‚âÆ‚áí‚â• l‚âÆl') l‚â§l') ts

insertTList‚â° : {l acc : ‚Ñï} -> BinomialTree A l -> (ts : SparseTreeList A l acc) -> DecTree A (SparseTreeList A l (2 ^ l + acc)) (leadingEntries ts)
insertTList‚â° {l = l} t [] = return $ entry_‚à∑_ {acc' = 2 ^ l + 0} {acc'‚â°2^l+acc = refl} t []
insertTList‚â° {l = l} {acc} t (empty‚à∑ ts) = return $ entry_‚à∑_ {acc' = 2 ^ l + acc} {acc'‚â°2^l+acc = refl} t ts
insertTList‚â° {l = l} t (entry_‚à∑_ {acc = acc'} {acc'‚â°2^l+acc = pf} t' ts) = do
        t-join <- link t t'
        tlist-dec-subst-acc (trans (+-assoc (2 ^ l) (2 ^ l) acc') $ cong (Œª x ‚Üí 2 ^ l + x) $ sym pf) $
            empty‚à∑ <$> insertTList‚â° t-join ts

tlist-n-inserts : (n : ‚Ñï) -> Vec A n -> Am (tlist-amortized0 A) A
tlist-n-inserts zero Vec.[] = lift
tlist-n-inserts (suc n) (x ‚à∑ xs) = Am.step (tlist-n-inserts n xs) (Œª ts ‚Üí insertTList‚â° (Leaf x) ts)

tlist-insert-pot-invariant :  {{_ : Leq A}}
                           -> ‚àÄ {l acc}
                           -> (t : BinomialTree A l)
                           -> (ts : SparseTreeList A l acc)
                           -> leadingEntries ts ‚äñ entries ts ‚Ñ§.+ + entries (reduce $ insertTList‚â° t ts) ‚â° + 1
tlist-insert-pot-invariant {l = l} t [] = refl
tlist-insert-pot-invariant {l = l} t (empty‚à∑ ts) = 0-a+suca‚â°1 (entries ts)
tlist-insert-pot-invariant {{‚â§A}} {l = l} t ts@(entry_‚à∑_ {acc = acc'} {acc'‚â°2^l+acc = pf} x ts') = begin
        leadingEntries ts ‚äñ entries ts ‚Ñ§.+ + entries (reduce $ insertTList‚â° t ts)
                         ‚â°‚ü® cong (Œª x ‚Üí leadingEntries ts ‚äñ entries ts ‚Ñ§.+ + x) einsert ‚ü©
        leadingEntries ts' ‚äñ entries ts' ‚Ñ§.+ + entries (reduce $ insertTList‚â° (reduce $ link t x) ts')
                         ‚â°‚ü® tlist-insert-pot-invariant (reduce $ link t x) ts' ‚ü©
        + 1              ‚àé
    where
        open ‚â°-Reasoning
        einsert : entries (reduce $ insertTList‚â° t ts) ‚â° entries (reduce $ insertTList‚â° (reduce $ link t x) ts')
        einsert = begin
            entries (reduce (insertTList‚â° t ts))

                        ‚â°‚ü® cong entries $ bind-elim (link t x) (Œª t-join ‚Üí tlist-dec-subst-acc (trans (+-assoc (2 ^ l) (2 ^ l) acc') (cong (Œª x ‚Üí 2 ^ l + x) $ sym pf)) $ empty‚à∑ <$> insertTList‚â° t-join ts') ‚ü©

            entries (reduce (tlist-dec-subst-acc (trans (+-assoc (2 ^ l) (2 ^ l) acc') (cong (Œª x ‚Üí 2 ^ l + x) $ sym pf)) $ empty‚à∑ <$> insertTList‚â° (reduce (link t x)) ts'))
                        ‚â°‚ü® sym $ tlist-dec-subst-acc-elim (entries ‚àò reduce {{‚â§A}}) (trans (+-assoc (2 ^ l) (2 ^ l) acc') (cong (Œª x ‚Üí 2 ^ l + x) $ sym pf)) (empty‚à∑ <$> insertTList‚â° (reduce (link t x)) ts') ‚ü©

            entries (reduce (empty‚à∑ <$> insertTList‚â° (reduce (link t x)) ts'))

                        ‚â°‚ü® cong entries $ apply-elim empty‚à∑ (insertTList‚â° (reduce $ link t x) ts') ‚ü©

            entries (reduce $ insertTList‚â° (reduce $ link t x) ts')

                        ‚àé

tlist-insert-in-linear-time : {n : ‚Ñï} -> (xs : Vec A n) -> {{_ : Leq A}} -> atime-full (tlist-n-inserts n xs) ‚â° + n
tlist-insert-in-linear-time Vec.[] = refl
tlist-insert-in-linear-time {n = n@(suc n-1)} (x ‚à∑ xs) = let n-1-inserts = tlist-n-inserts _ xs in
                                                         let n-inserts = tlist-n-inserts _ (x ‚à∑ xs) in begin
        atime-full n-1-inserts
        ‚Ñ§.+ (leadingEntries (am-eval n-1-inserts)
             ‚äñ     am-potential n-1-inserts
             ‚Ñ§.+ + am-potential n-inserts)         ‚â°‚ü® cong (‚Ñ§._+ atime-step n-inserts) $ tlist-insert-in-linear-time xs ‚ü©

        + n-1 ‚Ñ§.+ (leadingEntries (am-eval n-1-inserts)
                   ‚äñ     am-potential n-1-inserts
                   ‚Ñ§.+ + am-potential n-inserts)   ‚â°‚ü® cong (Œª x ‚Üí + n-1 ‚Ñ§.+ x) $ tlist-insert-pot-invariant (Leaf x) (am-eval n-1-inserts) ‚ü©

        + n-1 ‚Ñ§.+ + 1                              ‚â°‚ü®‚ü©

        + (n-1 + 1)                                ‚â°‚ü® cong (+_) $ +-comm n-1 1 ‚ü©

        + n ‚àé
    where
        open ‚â°-Reasoning

tListMergeAm‚â° :  {l acc acc' : ‚Ñï}
             -> (left : SparseTreeList A l acc)
             -> (right : SparseTreeList A l acc')
             -> Am1 (tlist-amortized' A) A l
tListMergeAm‚â° {l = l} {acc' = acc'} [] right = Am1.step {nextA = const l}
                                                        {nextI = const acc'}
                                                        {time = const 0}
                                                        (lift1 0) (Œª _ ‚Üí return right)
tListMergeAm‚â° {l = l} {acc = acc} (empty‚à∑ left) [] = Am1.step {nextA = const l}
                                                              {nextI = const acc}
                                                              {time = const 0}
                                                              (lift1 0) (Œª _ ‚Üí return $ empty‚à∑ left)
tListMergeAm‚â° (empty‚à∑ left) (empty‚à∑ right) = Am1.step {nextA = pred}
                                                      {nextI = ts-acc}
                                                      {time = const 0}
                                                      (tListMergeAm‚â° left right) (Œª ts ‚Üí return $ empty‚à∑ ts)
tListMergeAm‚â° {l = l} (empty‚à∑ left) (entry x ‚à∑ right) = Am1.step {nextA = pred}
                                                                 {nextI = Œª ts ‚Üí 2 ^ l + ts-acc ts}
                                                                 {time = const 0}
                                                                 (tListMergeAm‚â° left right) (Œª ts ‚Üí return $ entry_‚à∑_ {acc' = 2 ^ l + ts-acc ts} {acc'‚â°2^l+acc = refl} x ts)
tListMergeAm‚â° {l = l} {acc = acc} left@(entry _ ‚à∑ _) [] = Am1.step {nextA = const l}
                                                                   {nextI = const acc}
                                                                   {time = const 0}
                                                                   (lift1 0) (Œª _ ‚Üí return left)
tListMergeAm‚â° {l = l} (entry x ‚à∑ left) (empty‚à∑ right) = Am1.step {nextA = pred}
                                                                 {nextI = Œª ts ‚Üí 2 ^ l + ts-acc ts }
                                                                 {time = const 0}
                                                                 (tListMergeAm‚â° left right) (Œª ts ‚Üí return $ entry_‚à∑_ {acc' = 2 ^ l + ts-acc ts} {acc'‚â°2^l+acc = refl} x ts)
tListMergeAm‚â° {l = l} (entry x ‚à∑ left) (entry y ‚à∑ right) = Am1.step {nextA = pred}
                                                                    {nextI = Œª ts ‚Üí 2 ^ (suc l) + ts-acc ts}
                                                                    {time = Œª ts ‚Üí suc $ leadingEntries ts}
                                                                    (tListMergeAm‚â° left right)
                                                                    (Œª ts ‚Üí link x y >>= Œª t-join ‚Üí empty‚à∑ <$> insertTList‚â° t-join ts)

tListMergeAm‚â§ :  {l l' acc acc' : ‚Ñï}
              -> l ‚â§ l'
              -> (left : SparseTreeList A l acc)
              -> (right : SparseTreeList A l' acc')
              -> Am1 (tlist-amortized' A) A l
tListMergeAm‚â§ {l = l} {l' = l'} l‚â§l' left right with l <? l'
... | yes (s‚â§s l‚â§l'-1) = tListMergeAm‚â§ l‚â§l'-1 left (empty‚à∑ right)
... | no  l‚âÆl' = tListMergeAm‚â° left (tlist-subst (sym $ ‚â§-antisym l‚â§l' (‚âÆ‚áí‚â• l‚âÆl')) right)

tListMergeAm :  {l l' acc acc' : ‚Ñï}
             -> (left : SparseTreeList A l acc)
             -> (right : SparseTreeList A l' acc')
             -> Am1 (tlist-amortized' A) A (l ‚äì l')
tListMergeAm {A = A} {l = l} {l' = l'} left right with ‚â§-total l l'
... | inj‚ÇÅ l‚â§l' = subst (Am1 (tlist-amortized' A) A) (sym $ m‚â§n‚áím‚äìn‚â°m l‚â§l') $ tListMergeAm‚â§ l‚â§l' left right
... | inj‚ÇÇ l'‚â§l = subst (Am1 (tlist-amortized' A) A) (sym $ m‚â§n‚áín‚äìm‚â°m l'‚â§l) $ tListMergeAm‚â§ l'‚â§l right left

tlist-merge-in-linear-time‚â° :  {{_ : Leq A}}
                               {l acc acc' : ‚Ñï}
                            -> (left : SparseTreeList A l acc)
                            -> (right : SparseTreeList A l acc')
                            -> atime-full1 (tListMergeAm‚â° left right) ‚Ñ§.‚â§ + (entries left + entries right)
tlist-merge-in-linear-time‚â° [] right = ‚Ñ§-Props.‚â§-refl
tlist-merge-in-linear-time‚â° (empty‚à∑ left) [] = ‚Ñ§.+‚â§+ (m‚â§m+n (entries left) 0)
tlist-merge-in-linear-time‚â° ll@(empty‚à∑ left) rr@(empty‚à∑ right) = begin
        atime-full1 (tListMergeAm‚â° left right)
        ‚Ñ§.+ (0
             ‚äñ     am1-potential (tListMergeAm‚â° left right)
             ‚Ñ§.+ + am1-potential (tListMergeAm‚â° ll rr))          ‚â°‚ü®‚ü©

        atime-full1 (tListMergeAm‚â° left right)
        ‚Ñ§.+ (0
             ‚äñ     am1-potential (tListMergeAm‚â° left right)
             ‚Ñ§.+ + am1-potential (tListMergeAm‚â° left right))     ‚â°‚ü® cong (Œª x ‚Üí atime-full1 (tListMergeAm‚â° left right) ‚Ñ§.+ x) $
                                                                    0-a+[k+a]‚â°k (am1-potential (tListMergeAm‚â° left right)) 0 ‚ü©

        atime-full1 (tListMergeAm‚â° left right) ‚Ñ§.+ + 0           ‚â°‚ü® ‚Ñ§-Props.+-identity ≥ _ ‚ü©

        atime-full1 (tListMergeAm‚â° left right)                   ‚â§‚ü® tlist-merge-in-linear-time‚â° left right ‚ü©

        + (entries left + entries right) ‚àé
    where
        open ‚Ñ§-Props.‚â§-Reasoning
tlist-merge-in-linear-time‚â° (empty‚à∑ left) (entry x ‚à∑ right) = begin
        atime-full1 (tListMergeAm‚â° left right)
        ‚Ñ§.+ (0
             ‚äñ     am1-potential (tListMergeAm‚â° left right)
             ‚Ñ§.+ + (suc $ am1-potential $ tListMergeAm‚â° left right))  ‚â°‚ü® cong (Œª x ‚Üí atime-full1 (tListMergeAm‚â° left right) ‚Ñ§.+ x) $ 0-a+suca‚â°1 (am1-potential $ tListMergeAm‚â° left right) ‚ü©

        atime-full1 (tListMergeAm‚â° left right) ‚Ñ§.+ + 1                ‚â§‚ü® ‚Ñ§-Props.+-monoÀ°-‚â§ (+ 1) (tlist-merge-in-linear-time‚â° left right) ‚ü©

        + (entries left + entries right) ‚Ñ§.+ + 1                      ‚â°‚ü® cong (+_) $ +-comm _ 1 ‚ü©

        + suc (entries left + entries right)                          ‚â°‚ü® cong (+_) $ sym $ +-suc _ _ ‚ü©

        + (entries left + suc (entries right))       ‚àé
    where
        open ‚Ñ§-Props.‚â§-Reasoning
tlist-merge-in-linear-time‚â° (entry x ‚à∑ left) [] = ‚Ñ§-Props.‚â§-reflexive $ cong (Œª x ‚Üí + suc x) $ sym $ +-identity ≥ _
tlist-merge-in-linear-time‚â° (entry x ‚à∑ left) (empty‚à∑ right) = begin
        atime-full1 (tListMergeAm‚â° left right)
        ‚Ñ§.+ (0
             ‚äñ     am1-potential (tListMergeAm‚â° left right)
             ‚Ñ§.+ + (suc $ am1-potential $ tListMergeAm‚â° left right))  ‚â°‚ü® cong (Œª x ‚Üí atime-full1 (tListMergeAm‚â° left right) ‚Ñ§.+ x) $ 0-a+suca‚â°1 (am1-potential $ tListMergeAm‚â° left right) ‚ü©

        atime-full1 (tListMergeAm‚â° left right) ‚Ñ§.+ + 1                ‚â§‚ü® ‚Ñ§-Props.+-monoÀ°-‚â§ (+ 1) (tlist-merge-in-linear-time‚â° left right) ‚ü©

        + (entries left + entries right) ‚Ñ§.+ + 1                      ‚â°‚ü® cong (+_) $ +-comm _ 1 ‚ü©

        + suc (entries left + entries right)                          ‚àé
    where
        open ‚Ñ§-Props.‚â§-Reasoning
tlist-merge-in-linear-time‚â° ll@(entry x ‚à∑ left) rr@(entry y ‚à∑ right) = begin
        atime-full1 rec-merge
        ‚Ñ§.+ (suc (leadingEntries $ am1-eval rec-merge)
             ‚äñ     am1-potential rec-merge
             ‚Ñ§.+ + am1-potential nxt-merge)               ‚â°‚ü® cong (Œª x ‚Üí atime-full1 rec-merge ‚Ñ§.+ x) $
                                                             suca-b+c‚â°suc[a-b+c] (leadingEntries $ am1-eval rec-merge)
                                                                                 (am1-potential rec-merge)
                                                                                 (am1-potential nxt-merge) ‚ü©

        atime-full1 rec-merge
        ‚Ñ§.+ (+ 1 ‚Ñ§.+ (leadingEntries (am1-eval rec-merge)
                      ‚äñ     am1-potential rec-merge
                      ‚Ñ§.+ + am1-potential nxt-merge))

                                                          ‚â°‚ü® cong (Œª x ‚Üí atime-full1 rec-merge ‚Ñ§.+ (+ 1 ‚Ñ§.+ x)) einsert ‚ü©

        atime-full1 rec-merge ‚Ñ§.+ (+ 2)                   ‚â§‚ü® ‚Ñ§-Props.+-monoÀ°-‚â§ (+ 2) $ tlist-merge-in-linear-time‚â° left right ‚ü©

        + (entries left + entries right) ‚Ñ§.+ (+ 2)        ‚â°‚ü® ‚Ñ§-Props.+-comm (+ (entries left + entries right)) (+ 2) ‚ü©

        + 2 ‚Ñ§.+ + (entries left + entries right)          ‚â°‚ü® cong (+_) $ sym $ +-suc (suc $ entries left) (entries right) ‚ü©

        + suc (entries left + suc (entries right))        ‚àé
    where
        open ‚Ñ§-Props.‚â§-Reasoning
        open Relation.Binary.PropositionalEquality renaming (module ‚â°-Reasoning to E)
        rec-merge = tListMergeAm‚â° left right
        nxt-merge = tListMergeAm‚â° ll rr
        einsert : leadingEntries (am1-eval rec-merge) ‚äñ am1-potential rec-merge ‚Ñ§.+ + am1-potential nxt-merge ‚â° + 1
        einsert = E.begin
            leadingEntries (am1-eval rec-merge)
            ‚äñ     entries (am1-eval rec-merge)
            ‚Ñ§.+ + entries (am1-eval nxt-merge)        E.‚â°‚ü® cong (Œª x ‚Üí leadingEntries (am1-eval rec-merge)
                                                                       ‚äñ     entries (am1-eval rec-merge)
                                                                       ‚Ñ§.+ + entries x) $
                                                           apply-elim empty‚à∑ (insertTList‚â° (reduce $ link x y)
                                                                                           (am1-eval rec-merge)) ‚ü©

            leadingEntries (am1-eval rec-merge)
            ‚äñ entries (am1-eval rec-merge)
            ‚Ñ§.+ + entries (reduce $ insertTList‚â° (reduce $ link x y) (am1-eval rec-merge))

                                                      E.‚â°‚ü® tlist-insert-pot-invariant (reduce $ link x y) (am1-eval rec-merge) ‚ü©

            + 1                                                       E.‚àé

tlist-merge-in-linear-time‚â§ :  {{_ : Leq A}}
                               {l l' acc acc' : ‚Ñï}
                            -> (l‚â§l' : l ‚â§ l')
                            -> (left : SparseTreeList A l acc)
                            -> (right : SparseTreeList A l' acc')
                            -> atime-full1 (tListMergeAm‚â§ l‚â§l' left right) ‚Ñ§.‚â§ + (entries left + entries right)
tlist-merge-in-linear-time‚â§ {l = l} {l' = l'} l‚â§l' left right with l <? l'
... | yes (s‚â§s l‚â§l'-1) = tlist-merge-in-linear-time‚â§ l‚â§l'-1 left (empty‚à∑ right)
... | no l‚âÆl'  = begin
        atime-full1 (tListMergeAm‚â° left (tlist-subst (sym $ ‚â§-antisym l‚â§l' (‚âÆ‚áí‚â• l‚âÆl')) right))

                                ‚â§‚ü® tlist-merge-in-linear-time‚â° left (tlist-subst (sym $ ‚â§-antisym l‚â§l' (‚âÆ‚áí‚â• l‚âÆl')) right) ‚ü©

        + (entries left + entries (tlist-subst (sym $ ‚â§-antisym l‚â§l' (‚âÆ‚áí‚â• l‚âÆl')) right))

                                ‚â°‚ü® cong (Œª x ‚Üí + (entries left + x)) $ sym $ tlist-subst-elim entries (sym $ ‚â§-antisym l‚â§l' (‚âÆ‚áí‚â• l‚âÆl')) right ‚ü©

        + (entries left + entries right) ‚àé
    where
        open ‚Ñ§-Props.‚â§-Reasoning

tlist-merge-in-linear-time :  {{_ : Leq A}}
                              {l l' acc acc' : ‚Ñï}
                           -> (left : SparseTreeList A l acc)
                           -> (right : SparseTreeList A l' acc')
                           -> atime-full1 (tListMergeAm left right) ‚Ñ§.‚â§ + (entries left + entries right)
tlist-merge-in-linear-time {A = A} {l = l} {l' = l'} left right with ‚â§-total l l'
... | inj‚ÇÅ l‚â§l' = begin
        atime-full1 (subst (Am1 (tlist-amortized' A) A) (sym $ m‚â§n‚áím‚äìn‚â°m l‚â§l') $ tListMergeAm‚â§ l‚â§l' left right)

                                ‚â°‚ü® subst-appl' atime-full1 (sym $ m‚â§n‚áím‚äìn‚â°m l‚â§l') $ tListMergeAm‚â§ l‚â§l' left right ‚ü©

        atime-full1 (tListMergeAm‚â§ l‚â§l' left right)

                                ‚â§‚ü® tlist-merge-in-linear-time‚â§ l‚â§l' left right ‚ü©

        + (entries left + entries right) ‚àé
    where
        open ‚Ñ§-Props.‚â§-Reasoning
... | inj‚ÇÇ l'‚â§l = begin
        atime-full1 (subst (Am1 (tlist-amortized' A) A) (sym $ m‚â§n‚áín‚äìm‚â°m l'‚â§l) $ tListMergeAm‚â§ l'‚â§l right left)

                                ‚â°‚ü® subst-appl' atime-full1 (sym $ m‚â§n‚áín‚äìm‚â°m l'‚â§l) $ tListMergeAm‚â§ l'‚â§l right left ‚ü©

        atime-full1 (tListMergeAm‚â§ l'‚â§l right left)

                                ‚â§‚ü® tlist-merge-in-linear-time‚â§ l'‚â§l right left ‚ü©

        + (entries right + entries left)

                                ‚â°‚ü® cong (+_) $ +-comm (entries right) (entries left) ‚ü©

        + (entries left + entries right) ‚àé
    where
        open ‚Ñ§-Props.‚â§-Reasoning

merge-in-log-time :  {{_ : Leq A}}
                     {l l' acc acc' : ‚Ñï}
                  -> (left : SparseTreeList A l acc)
                  -> (right : SparseTreeList A l' acc')
                  -> atime-full1 (tListMergeAm left right) ‚Ñ§.‚â§ + 2 * 1+‚åälog‚ÇÇ acc ‚äî acc' ‚åã
merge-in-log-time {acc = acc} {acc' = acc'} left right = ‚Ñ§‚â§.begin
        atime-full1 (tListMergeAm left right)    ‚Ñ§‚â§.‚â§‚ü® tlist-merge-in-linear-time left right ‚ü©
        + (entries left + entries right)         ‚Ñ§‚â§.‚â§‚ü® ‚Ñ§.+‚â§+ $ begin

            entries left + entries right                     ‚â§‚ü® +-monoÀ°-‚â§ _ $ len‚â§‚åälog‚ÇÇacc‚åã left ‚ü©
            1+‚åälog‚ÇÇ acc ‚åã + entries right                    ‚â§‚ü® +-monoÀ°-‚â§ _ $ 1+‚åälog‚ÇÇ‚åã-mono $ m‚â§m‚äîn acc acc' ‚ü©
            1+‚åälog‚ÇÇ acc ‚äî acc' ‚åã + entries right             ‚â§‚ü® +-mono ≥-‚â§ _ $ len‚â§‚åälog‚ÇÇacc‚åã right ‚ü©
            1+‚åälog‚ÇÇ acc ‚äî acc' ‚åã + 1+‚åälog‚ÇÇ acc' ‚åã            ‚â§‚ü® +-mono ≥-‚â§ _ $ 1+‚åälog‚ÇÇ‚åã-mono $ n‚â§m‚äîn acc acc' ‚ü©
            1+‚åälog‚ÇÇ acc ‚äî acc' ‚åã + 1+‚åälog‚ÇÇ acc ‚äî acc' ‚åã      ‚â°‚ü®‚ü©
            2 * 1+‚åälog‚ÇÇ acc ‚äî acc' ‚åã                         ‚àé
                                                  ‚ü©
        + (2 * 1+‚åälog‚ÇÇ acc ‚äî acc' ‚åã)              ‚Ñ§‚â§.‚àé
    where
        open ‚Ñ§-Props renaming (module ‚â§-Reasoning to ‚Ñ§‚â§) using ()
        open ‚â§-Reasoning

findMin : {l acc : ‚Ñï} -> SparseTreeList A l (suc acc) -> DecTree A A 1+‚åälog‚ÇÇ (suc acc) ‚åã
findMin ts = delay-‚â§ (len‚â§‚åälog‚ÇÇacc‚åã ts) $ findMin' ts
    where
        findMin'' : {l acc : ‚Ñï} -> A -> (ts : SparseTreeList A l acc) -> DecTree A A (entries ts)
        findMin'' a [] = return a
        findMin'' a (empty‚à∑ ts) = findMin'' a ts
        findMin'' a (entry node ‚à∑ ts) = if' a ‚â§? (tVal node) then findMin'' a ts else findMin'' (tVal node) ts
        findMin' : {l acc : ‚Ñï} -> (ts : SparseTreeList A l (suc acc)) -> DecTree A A (entries ts)
        findMin' (empty‚à∑ ts) = findMin' ts
        findMin' (entry node ‚à∑ ts) = delay' 1 $ findMin'' (tVal node) ts

cum-acc : {l : ‚Ñï} -> DescList (BinomialTree A) l -> ‚Ñï
cum-acc D[ _ ] = 1
cum-acc (_D‚à∑_ {l = l} _ dl) = cum-acc dl + 2 ^ (suc l)

cum-acc‚â°2^l : {l : ‚Ñï} -> (dl : DescList (BinomialTree A) l) -> suc (cum-acc dl) ‚â° 2 ^ (suc l)
cum-acc‚â°2^l D[ _ ] = refl
cum-acc‚â°2^l {l = l} (_D‚à∑_ {l = l-1} _ dl) = cong (_+ 2 ^ l) $ cum-acc‚â°2^l dl


inner-acc : {l : ‚Ñï} -> BinomialTree A l -> ‚Ñï
inner-acc (Leaf _) = 0
inner-acc (Node _ ts) = cum-acc ts

inner-acc‚â°2^l : {l : ‚Ñï} -> (t : BinomialTree A l) -> suc (inner-acc t) ‚â° 2 ^ l
inner-acc‚â°2^l (Leaf _) = refl
inner-acc‚â°2^l (Node _ ts) = cum-acc‚â°2^l ts

desclist-2-sparselist : {l : ‚Ñï} -> (dl : DescList (BinomialTree A) l) -> SparseTreeList A 0 (cum-acc dl)
desclist-2-sparselist dl = tlist-subst-acc (+-identity ≥ $ cum-acc dl) $ dl-2-sparse dl []
    where
        dl-2-sparse : {l acc : ‚Ñï} -> (dl : DescList (BinomialTree A) l) -> SparseTreeList A (suc l) acc -> SparseTreeList A 0 (cum-acc dl + acc)
        dl-2-sparse {acc = acc} D[ x ] ts = entry_‚à∑_ {acc'‚â°2^l+acc = refl} x ts
        dl-2-sparse {l = l} {acc = acc} (x D‚à∑ dl) ts = tlist-subst-acc (sym $ +-assoc (cum-acc dl) (2 ^ l) acc) $ dl-2-sparse dl (entry_‚à∑_ {acc'‚â°2^l+acc = refl} x ts)


inner-trees : {l : ‚Ñï} -> (t : BinomialTree A l) -> SparseTreeList A 0 (inner-acc t)
inner-trees (Leaf _) = []
inner-trees (Node _ ts) = desclist-2-sparselist ts

record RemoveTree (A : Set a) (l : ‚Ñï) (acc : ‚Ñï) : Set a where
     field
         {l'} : ‚Ñï
         {acc'} : ‚Ñï
         min : A
         tree : BinomialTree A l'
         rem-heap : SparseTreeList A l acc'
         full-heap : SparseTreeList A l acc
         acc‚â°acc'+inner : acc ‚â° acc' + suc (inner-acc tree)


find-and-remove-min-tree : {l acc : ‚Ñï} -> (ts : SparseTreeList A l (suc acc)) -> DecTree A (RemoveTree A l (suc acc)) 1+‚åälog‚ÇÇ suc acc ‚åã
find-and-remove-min-tree ts = delay-‚â§ (len‚â§‚åälog‚ÇÇacc‚åã ts) $ find-and-remove-min' ts
    where
        ext-rt-empty : {l acc : ‚Ñï} -> RemoveTree A (suc l) acc -> RemoveTree A l acc
        ext-rt-empty record { min = min ; tree = tree ; rem-heap = rem-heap ; full-heap = full-heap ; acc‚â°acc'+inner = accinn}
                     = record { min = min ; tree = tree ; rem-heap = empty‚à∑ rem-heap ; full-heap = empty‚à∑ full-heap ; acc‚â°acc'+inner = accinn}
        ext-rt-entry : {l acc : ‚Ñï} -> BinomialTree A l -> RemoveTree A (suc l) acc -> RemoveTree A l (2 ^ l + acc)
        ext-rt-entry {l = l} t record { min = min ; tree = tree ; rem-heap = rem-heap ; full-heap = full-heap ; acc‚â°acc'+inner = accinn }
                     = record {
                         min = min
                       ; tree = tree
                       ; rem-heap =  entry_‚à∑_ {acc'‚â°2^l+acc = refl} t rem-heap
                       ; full-heap = entry_‚à∑_ {acc'‚â°2^l+acc = refl} t full-heap
                       ; acc‚â°acc'+inner = trans (cong (Œª x ‚Üí 2 ^ l + x) accinn) (sym $ +-assoc (2 ^ l) _ _)
                     }
        swap-rt : {l acc : ‚Ñï} -> BinomialTree A l -> RemoveTree A (suc l) acc -> RemoveTree A l (2 ^ l + acc)
        swap-rt {acc = acc} node record { full-heap = full-heap ; acc‚â°acc'+inner = acc+inn }
                = record {
                    min = (tVal node)
                  ; tree = node
                  ; rem-heap = empty‚à∑ full-heap
                  ; full-heap = entry_‚à∑_ {acc'‚â°2^l+acc = refl} node full-heap
                  ; acc‚â°acc'+inner = trans (cong (_+ acc) $ sym $ inner-acc‚â°2^l node) (+-comm _ acc)
                }
        find-and-remove-min' : {l acc : ‚Ñï} -> (ts : SparseTreeList A l (suc acc)) -> DecTree A (RemoveTree A l (suc acc)) (entries ts)
        find-and-remove-min' (empty‚à∑ ts) = find-and-remove-min' ts <&> Œª rt -> ext-rt-empty rt
        find-and-remove-min' (entry_‚à∑_ {acc = acc@(suc acc-1)} {acc'‚â°2^l+acc = pf} node ts) =
                                    height-‚â° (+-comm _ 1) $ do
                                        rt <- find-and-remove-min' ts
                                        if' (RemoveTree.min rt) ‚â§? (tVal node)
                                            then return (subst (RemoveTree _ _) (sym pf) $ ext-rt-entry node rt)
                                            else return (subst (RemoveTree _ _) (sym pf) $ swap-rt node rt)
        find-and-remove-min' {l = l} (entry_‚à∑_ {acc = zero} {acc'‚â°2^l+acc = pf} node ts) =
                                    delay-‚â§ z‚â§n $
                                    return $ subst (RemoveTree _ _) (sym pf) $
                                           record { min = (tVal node)
                                                  ; tree = node
                                                  ; rem-heap = []
                                                  ; full-heap = entry_‚à∑_ {acc'‚â°2^l+acc = refl} node []
                                                  ; acc‚â°acc'+inner = trans (+-identity ≥ $ 2 ^ l) (sym $ inner-acc‚â°2^l node)
                                           }

deleteMin : {l acc : ‚Ñï} -> (ts : SparseTreeList A l (suc acc)) -> Am1 (tlist-amortized' A) A 0
deleteMin {A = A} {l = l} ts = Am1.init-comp {am = tlist-amortized' A} rem Œª rt ‚Üí tListMergeAm‚â§ z‚â§n (inner-trees $ RemoveTree.tree rt) (RemoveTree.rem-heap rt)
    where
        rem = find-and-remove-min-tree ts


deleteMin-in-log-time :  {{_ : Leq A}}
                         {l acc : ‚Ñï}
                      -> (ts : SparseTreeList A l (suc acc))
                      -> atime-full1 (deleteMin ts) ‚Ñ§.‚â§ + 3 * 1+‚åälog‚ÇÇ suc acc ‚åã
deleteMin-in-log-time {acc = acc} ts = ‚Ñ§-Props.+-mono ≥-‚â§ (+ 1+‚åälog‚ÇÇ suc acc ‚åã) $ begin
        atime-full1 (tListMergeAm‚â§ z‚â§n (inner-trees $ RemoveTree.tree rem') (RemoveTree.rem-heap rem'))
                ‚â§‚ü® tlist-merge-in-linear-time‚â§ z‚â§n (inner-trees $ RemoveTree.tree rem') (RemoveTree.rem-heap rem') ‚ü©
        + (entries (inner-trees $ RemoveTree.tree rem') + entries (RemoveTree.rem-heap rem'))
                ‚â§‚ü® ‚Ñ§-Props.+-mono ≥-‚â§ (+ (entries $ inner-trees $ RemoveTree.tree rem')) $ ‚Ñ§.+‚â§+ $ len‚â§‚åälog‚ÇÇacc‚åã (RemoveTree.rem-heap rem') ‚ü©
        + (entries (inner-trees $ RemoveTree.tree rem') + 1+‚åälog‚ÇÇ RemoveTree.acc' rem' ‚åã)
                ‚â§‚ü® ‚Ñ§-Props.+-mono ≥-‚â§ (+ entries (inner-trees $ RemoveTree.tree rem')) $ ‚Ñ§.+‚â§+ $ 1+‚åälog‚ÇÇ‚åã-mono acc'‚â§acc ‚ü©
        + (entries (inner-trees $ RemoveTree.tree rem') + 1+‚åälog‚ÇÇ suc acc ‚åã)
                ‚â§‚ü® ‚Ñ§-Props.+-monoÀ°-‚â§ (+ 1+‚åälog‚ÇÇ suc acc ‚åã) $ ‚Ñ§.+‚â§+ $ len‚â§‚åälog‚ÇÇacc‚åã $ inner-trees $ RemoveTree.tree rem' ‚ü©
        + (1+‚åälog‚ÇÇ inner-acc $ RemoveTree.tree rem' ‚åã + 1+‚åälog‚ÇÇ suc acc ‚åã)
                ‚â§‚ü® ‚Ñ§-Props.+-monoÀ°-‚â§ (+ 1+‚åälog‚ÇÇ suc acc ‚åã) $ ‚Ñ§.+‚â§+ $ 1+‚åälog‚ÇÇ‚åã-mono $ n‚â§1+n _ ‚ü©
        + (1+‚åälog‚ÇÇ suc $ inner-acc $ RemoveTree.tree rem' ‚åã + 1+‚åälog‚ÇÇ suc acc ‚åã)
                ‚â§‚ü® ‚Ñ§-Props.+-monoÀ°-‚â§ (+ 1+‚åälog‚ÇÇ suc acc ‚åã) $ ‚Ñ§.+‚â§+ $ 1+‚åälog‚ÇÇ‚åã-mono accinner‚â§acc ‚ü©
        + 2 * 1+‚åälog‚ÇÇ suc acc ‚åã ‚àé
    where
        open ‚Ñ§-Props.‚â§-Reasoning
        rem = find-and-remove-min-tree ts
        rem' = reduce rem
        acc'‚â§acc = m+n‚â§o‚áím‚â§o (RemoveTree.acc' rem') (‚â§-reflexive $ sym $ RemoveTree.acc‚â°acc'+inner rem')
        accinner‚â§acc = m+n‚â§o‚áín‚â§o (RemoveTree.acc' rem') (‚â§-reflexive $ sym $ RemoveTree.acc‚â°acc'+inner rem')
